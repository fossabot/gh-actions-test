name: 'CMake build'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.image }}
    env:
      - CONAN_V2_MODE : 1

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows MSVC",
            image: windows-latest,
            cmake_preset: "windows-msvc-release",
            cxx: "cl",
            vcvars: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
          }
        - {
            name: "Ubuntu GCC 11",
            image: ubuntu-22.04,
            cmake_preset: "linux-gcc-release",
            cxx: "g++",
          }
        - {
            name: "Ubuntu Clang 14",
            image: ubuntu-22.04,
            cmake_preset: "linux-clang-release",
            cxx: "clang++",
          }
#        - {
#            name: "macOS Clang",
#            image: macos-latest,
#            cmake_preset: "macos-clang-release",
#            cxx: "clang++",
#          }

    steps:

    - name: Install basic dependencies on Ubuntu
      if: startsWith(matrix.config.image, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y cmake ninja-build ccache g++-11 clang-14

    - name: Install basic dependencies on Windows
      if: startsWith(matrix.config.image, 'windows')
      run: |
        choco install ninja cmake

    - name: Install basic dependencies on macOS
      if: startsWith(matrix.config.image, 'macos')
      run: |
        brew install cmake ninja

    - name: Install conan package manager
      run: |
        python -m pip install --upgrade pip
        pip --disable-pip-version-check --no-cache-dir install wheel conan

    - name: Setup Github conan cache (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v3
      id: linux-conan-cache
      with:
        key: ${{ runner.os }}-conan-cache-${{ hashFiles('**/conanfile.txt') }}
        path: |
          ~/.conan

    - name: Setup Github conan cache (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      id: windows-conan-cache
      with:
        key: ${{ runner.os }}-conan-cache-${{ hashFiles('**/conanfile.txt') }}
        path: |
          C:\Users\runneradmin\.conan
          C:\.conan

    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup ccache Compiler Cache
      if: startsWith(matrix.config.image, 'ubuntu')
      uses: hendrikmuhs/ccache-action@v1.2.2

    - name: Configuration and build on Linux and macOS
      if: runner.os != 'Windows'
      run: |
        cmake --preset ${{ matrix.config.cmake_preset }}
        cmake --build --preset ${{ matrix.config.cmake_preset }}

    - name: Configuration and build on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        call "${{ matrix.config.vcvars }}"
        cmake --preset ${{ matrix.config.cmake_preset }}
        cmake --build --preset ${{ matrix.config.cmake_preset }}

    - name: Run Unit Test
      run: |
        ctest --preset ${{ matrix.config.cmake_preset }}

    - name: Clean up conan's build & sources
      run: |
        conan remove -f "*" --builds
        conan remove -f "*" --src
