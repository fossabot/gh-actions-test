name: 'CMake build'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cmake_preset: "windows-msvc-release",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Ninja"
          }
          - {
            name: "Linux/Ubuntu 22.04 GCC 11",
            os: ubuntu-22.04,
            cmake_preset: "linux-gcc-release",
            cxx: "g++",
            generators: "Ninja"
          }
          - {
            name: "Linux/Ubuntu 22.04 Clang 14",
            os: ubuntu-22.04,
            cmake_preset: "linux-clang-release",
            cxx: "g++",
            generators: "Ninja"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cmake_preset: "macos-clang-release",
            cxx: "clang++",
            generators: "Ninja"
          }

    steps:

    - name: Print env
      run: |
        echo github.event.action: ${{ github.event.action }}
        echo github.event_name: ${{ github.event_name }}

    - name: Install basic dependencies on Linux
      if: startsWith(matrix.config.os, 'linux')
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y cmake ninja-build ccache g++-11 clang-14

    - name: Install basic dependencies on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        choco install ninja cmake
        ninja --version
        cmake --version
        # cmd "${{ matrix.config.environment_script }}"

    - name: Install basic dependencies on macos
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install p7zip cmake ninja
        ninja --version
        cmake --version

    - name: Install conan package manager
      run: |
        python -m pip install --upgrade pip
        pip --disable-pip-version-check --no-cache-dir install wheel conan

    - name: Create conan's default profile
      run: |
        conan profile new --detect --force default > /dev/null
        # enforce new CXX11 ABI
        conan profile update settings.compiler.libcxx=libstdc++11 default
        conan profile update settings.compiler.cppstd=20 default

    - name: Specify conan's default profile for Clang compiler
      if: matrix.cxx == 'clang++'
      run: |
        conan profile update settings.compiler=clang

    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build dependencies with conan
      run: |
        conan install ${{ github.workspace }} --remote conancenter --build missing --profile default

    - name: Setup ccache Compiler Cache
      if: startsWith(matrix.config.os, 'linux')
      uses: hendrikmuhs/ccache-action@v1.2.2

    - name: CMake configuration
      run: |
        cmake --preset ${{ matrix.cmake_preset }}

    - name: CMake Build
      run: |
        cmake --build --preset ${{ matrix.cmake_preset }}

    - name: Build l10n
      if: startsWith(matrix.config.os, 'linux')
      run: |
        cmake --build --preset ${{ matrix.cmake_preset }} --target l10n

    - name: Run Unit Test
      run: |
        ctest --preset ${{ matrix.cmake_preset }}

    - name: Clean up conan build & sources
      run: |
        conan remove -f "*" --builds
        conan remove -f "*" --src
